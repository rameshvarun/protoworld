[
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "World",
        "description": "The world. All objects in the world should be accessible from here. If not, they will not be persisted in the live image."
      },
      "slot_values": {
        "parent": {
          "@r": 1
        },
        "Core": {
          "@r": 2
        },
        "Interface": {
          "@r": 8
        },
        "Modules": {
          "@r": 5
        },
        "Random": {
          "@t": "ProtoObject",
          "data": {
            "annotations": {
              "name": "Random",
              "description": "Utilities for generating random values."
            },
            "slot_values": {
              "parent": {
                "@r": 3
              },
              "Chance": {
                "@t": "MessageHandler",
                "data": "function(prob = 0.5) {\n    return Math.random() < prob;\n}"
              },
              "Choice": {
                "@t": "MessageHandler",
                "data": "function(choices) {\n    return choices[Math.floor(Math.random() * choices.length)];\n}"
              },
              "Uniform": {
                "@t": "MessageHandler",
                "data": "function(min = 0.0, max = 1.0) {\n    return Math.random() * (max - min) + min;\n}"
              },
              "Integer": {
                "@t": "MessageHandler",
                "data": "function(min, max) {\n    return Math.floor(this.Uniform(min, max));\n}"
              },
              "CharacterFromString": {
                "@t": "MessageHandler",
                "data": "function(chars) {\n    return chars[Math.floor(Math.random() * chars.length)];\n}"
              }
            },
            "slot_annotations": {
              "Chance": {
                "description": "Takes in a probability `prob` and returns true with probability `prob`."
              },
              "Choice": {
                "description": "Takes in an array and returns a random element from that array."
              }
            },
            "prototype_slots": [
              "parent"
            ]
          }
        },
        "FTS": {
          "@t": "ProtoObject",
          "data": {
            "annotations": {
              "name": "FTS",
              "description": "From the Stars - an X-Com inspired tactical strategy game."
            },
            "slot_values": {
              "parent": {
                "@r": 3
              },
              "Generators": {
                "@t": "ProtoObject",
                "data": {
                  "annotations": {
                    "name": "FTSGenerators"
                  },
                  "slot_values": {
                    "parent": {
                      "@r": 3
                    },
                    "Hunter": {
                      "@t": "ProtoObject",
                      "data": {
                        "annotations": {
                          "name": "HunterGenerators"
                        },
                        "slot_values": {
                          "parent": {
                            "@r": 3
                          },
                          "nameStarts": [
                            "aa",
                            "a",
                            "ai",
                            "au",
                            "ba",
                            "bu",
                            "e",
                            "fe",
                            "ha",
                            "hai",
                            "hau",
                            "hay",
                            "hea",
                            "hia",
                            "hii",
                            "hi",
                            "hoa",
                            "ho",
                            "hoo",
                            "hua",
                            "hu",
                            "i",
                            "io",
                            "iu",
                            "jo",
                            "kaa",
                            "kae",
                            "kai",
                            "ka",
                            "kea",
                            "kee",
                            "ke",
                            "keo",
                            "kia",
                            "kie",
                            "koa",
                            "ko",
                            "kri",
                            "ku",
                            "kui",
                            "la",
                            "lae",
                            "lai",
                            "lei",
                            "le",
                            "lia",
                            "li",
                            "lii",
                            "lio",
                            "lo",
                            "lu",
                            "luu",
                            "ma",
                            "mai",
                            "mau",
                            "mea",
                            "me",
                            "mi",
                            "mo",
                            "na",
                            "ne",
                            "nga",
                            "noa",
                            "nui",
                            "o"
                          ],
                          "nameParts": [
                            "lo",
                            "na",
                            "nao",
                            "fa",
                            "fu",
                            "ho",
                            "ha",
                            "ma",
                            "ko",
                            "sa",
                            "ke",
                            "ni",
                            "ri",
                            "la",
                            "mea",
                            "nu",
                            "wa",
                            "hu",
                            "hea",
                            "me",
                            "re",
                            "no",
                            "pe",
                            "pu",
                            "tia"
                          ],
                          "GenerateName": {
                            "@t": "MessageHandler",
                            "data": "function() {\n    const startsByLetter = new Map();\n    for (let start of this.nameStarts) {\n        let letter = start[0];\n        \n        let starts = startsByLetter.get(letter) || [];\n        starts.push(start);\n        startsByLetter.set(letter, starts);\n    }\n    \n    let firstLetter = World.Random.Choice(Array.from(startsByLetter.keys()));\n    let name = World.Random.Choice(startsByLetter.get(firstLetter));\n    \n    let numParts = World.Random.Integer(1, 3);\n    for(var i = 0; i < numParts; ++i) {\n        name += World.Random.Choice(this.nameParts);\n    }\n    \n    name = name[0].toUpperCase() + name.slice(1);\n    return name;\n}"
                          },
                          "Generate": {
                            "@t": "MessageHandler",
                            "data": "function(hunterClass) {\n    let inst = hunterClass.Extend();\n    inst.name = this.GenerateName();\n    inst.SetName(inst.name);\n    inst.age = World.Random.Integer(18, 45);\n    return inst;\n}"
                          },
                          "GenerateTribe": {
                            "@t": "MessageHandler",
                            "data": "function() {\n    var tribe = [];\n    \n    // Generate one of each class.\n    tribe.push(this.Generate(World.FTS.Healer));\n    tribe.push(this.Generate(World.FTS.Tracker));\n    tribe.push(this.Generate(World.FTS.Archer));\n    tribe.push(this.Generate(World.FTS.Spearman));\n    \n    // Fill the rest of the tribe with archers or spearsman\n    for (let i = 0; i < 2; ++i) {\n    tribe.push(this.Generate(World.Random.Choice([\n            World.FTS.Archer,\n            World.FTS.Spearman,\n        ])));\n    }\n    \n    return tribe;\n}"
                          }
                        },
                        "slot_annotations": {},
                        "prototype_slots": [
                          "parent"
                        ]
                      }
                    }
                  },
                  "slot_annotations": {},
                  "prototype_slots": [
                    "parent"
                  ]
                }
              },
              "Hunter": {
                "@r": 10
              },
              "Archer": {
                "@t": "ProtoObject",
                "data": {
                  "annotations": {
                    "name": "Archer"
                  },
                  "slot_values": {
                    "parent": {
                      "@r": 10
                    },
                    "ClassName": {
                      "@t": "MessageHandler",
                      "data": "function() {\n    return \"Archer\";\n}"
                    }
                  },
                  "slot_annotations": {},
                  "prototype_slots": [
                    "parent"
                  ]
                }
              },
              "Spearman": {
                "@t": "ProtoObject",
                "data": {
                  "annotations": {
                    "name": "Spearman"
                  },
                  "slot_values": {
                    "parent": {
                      "@r": 10
                    },
                    "ClassName": {
                      "@t": "MessageHandler",
                      "data": "function() {\n    return \"Spearman\"\n}"
                    }
                  },
                  "slot_annotations": {},
                  "prototype_slots": [
                    "parent"
                  ]
                }
              },
              "Tracker": {
                "@t": "ProtoObject",
                "data": {
                  "annotations": {
                    "name": "Tracker"
                  },
                  "slot_values": {
                    "parent": {
                      "@r": 10
                    },
                    "ClassName": {
                      "@t": "MessageHandler",
                      "data": "function() {\n    return 'Tracker';\n}"
                    }
                  },
                  "slot_annotations": {},
                  "prototype_slots": [
                    "parent"
                  ]
                }
              },
              "Healer": {
                "@t": "ProtoObject",
                "data": {
                  "annotations": {
                    "name": "Healer"
                  },
                  "slot_values": {
                    "parent": {
                      "@r": 10
                    },
                    "ClassName": {
                      "@t": "MessageHandler",
                      "data": "function() {\n    return \"Healer\";\n}"
                    }
                  },
                  "slot_annotations": {},
                  "prototype_slots": [
                    "parent"
                  ]
                }
              },
              "GameWindow": {
                "@t": "ProtoObject",
                "data": {
                  "annotations": {
                    "name": "GameWindow",
                    "description": "The main window where an in-progress game will be shown."
                  },
                  "slot_values": {
                    "parent": {
                      "@r": 9
                    },
                    "New": {
                      "@t": "MessageHandler",
                      "data": "function(state) {\n    let inst = this.Extend();\n    inst.state = state;\n    return inst;\n}"
                    },
                    "RenderContent": {
                      "@t": "MessageHandler",
                      "data": "function() {\n    return this.state.Render();\n}"
                    },
                    "GetTitle": {
                      "@t": "MessageHandler",
                      "data": "function() {\n    return \"GameWindow\"\n}"
                    }
                  },
                  "slot_annotations": {},
                  "prototype_slots": [
                    "parent"
                  ]
                }
              },
              "GameState": {
                "@t": "ProtoObject",
                "data": {
                  "annotations": {
                    "name": "GameState"
                  },
                  "slot_values": {
                    "parent": {
                      "@r": 3
                    },
                    "New": {
                      "@t": "MessageHandler",
                      "data": "function() {\n    let inst = this.Extend()\n    inst.day = 1;\n    inst.phase = World.FTS.MorningPhase.New(inst);\n    inst.tribe = World.FTS.Generators.Hunter.GenerateTribe()\n    inst.food = 4 * inst.tribe.length;\n    return inst;\n}"
                    },
                    "OpenGameWindow": {
                      "@t": "MessageHandler",
                      "data": "function() {\n    World.FTS.GameWindow.New(this).Open()\n}"
                    },
                    "Render": {
                      "@t": "MessageHandler",
                      "data": "function() {\n    return this.phase.Render()\n}"
                    },
                    "GetGameEncounterProb": {
                      "@t": "MessageHandler",
                      "data": "function(party) {\n    let baseProb = 0.5;\n    \n    let hasTracker = false;\n    for (let h of party.values()) {\n     // TODO: Check if anybody is a tracker. \n    }\n    \n    return 0.5;\n}"
                    }
                  },
                  "slot_annotations": {},
                  "prototype_slots": [
                    "parent"
                  ]
                }
              },
              "MorningPhase": {
                "@t": "ProtoObject",
                "data": {
                  "annotations": {
                    "name": "MorningPhase",
                    "description": "During this phase, you determine the hunting party assignment of the tribe members."
                  },
                  "slot_values": {
                    "parent": {
                      "@r": 3
                    },
                    "Render": {
                      "@t": "MessageHandler",
                      "data": "function() {\n  return (\n    <>\n      <h1>Morning (Day {this.state.day})</h1>\n      {World.debug && (\n        <div>\n          Game State: {this.state.RenderWidget()}, Phase: {this.RenderWidget()}\n        </div>\n      )}\n      <h2>Food {this.state.food}</h2>\n      Durng this phase, you assign your tribe members to hunting parties.\n      Wounded members cannot be asigned to a party.\n      <h2>Staying at Camp</h2>\n      {this.GetAvailableHunters().map(h => (\n        <>\n          <div>\n            {h.name} ({h.ClassName()})\n          </div>\n          {World.debug && h.RenderWidget()}\n        </>\n      ))}\n      <h2>Parties</h2>\n      <button onClick={() => this.parties.push(new Set())}>\n        Create a Party\n      </button>\n      {this.parties.map((p, i) => (\n        <>\n          <h2>\n            Party #{i + 1} (Size: {p.size}{p.size > 0 && <span>, Encounter Prob: {this.state.GetGameEncounterProb(p)}</span>}){\" \"}\n            <small>\n              <button\n                onClick={() =>\n                  (this.parties = this.parties.filter(other => other !== p))\n                }\n              >\n                Remove Party\n              </button>\n            </small>\n          </h2>\n\n\n            \n            {Array.from(p).map(h => <div>{h.name} ({h.ClassName()}) <button onClick={() => p.delete(h)}>Remove</button></div>)}\n            \n           {this.GetAvailableHunters().map(h => <button\n           onClick={() => p.add(h)}>Add {h.name} ({h.ClassName()})</button>)}\n          \n        </>\n      ))}\n      <hr />\n      <button onClick={() => this.AdvancePhase()}>Confirm Party Selection</button>\n    </>\n  );\n}"
                    },
                    "New": {
                      "@t": "MessageHandler",
                      "data": "function(state) {\n    let inst = this.Extend();\n    inst.state = state;\n    inst.parties = [];\n    return inst;\n}"
                    },
                    "GetAvailableHunters": {
                      "@t": "MessageHandler",
                      "data": "function() {\n    return this.state.tribe.filter(h => {\n        for (let party of this.parties) {\n            if (party.has(h)) return false;\n        }\n        return true;\n    });\n}"
                    },
                    "AdvancePhase": {
                      "@t": "MessageHandler",
                      "data": "function() {\n    this.state.phase = World.FTS.DaytimePhase.New(this.state, this.parties)\n}"
                    }
                  },
                  "slot_annotations": {},
                  "prototype_slots": [
                    "parent"
                  ]
                }
              },
              "DaytimePhase": {
                "@t": "ProtoObject",
                "data": {
                  "annotations": {
                    "name": "DaytimePhase"
                  },
                  "slot_values": {
                    "parent": {
                      "@r": 3
                    },
                    "New": {
                      "@t": "MessageHandler",
                      "data": "function(state, parties) {\n    let inst = this.Extend();\n    inst.state = state;\n    inst.parties = parties;\n    inst.encounters = inst.GenerateEncounters();\n    inst.encounterIndex = 0;\n    return inst;\n}"
                    },
                    "Render": {
                      "@t": "MessageHandler",
                      "data": "function() {\n    return <>\n        <h1>Daytime (Day {this.state.day})</h1>\n        {this.encounterIndex >= this.encounters.length ?\n            <div>All encounters finished. <button onClick={() => this.AdvancePhase()}>Proceed</button></div> :\n            (this.encounters[this.encounterIndex] ? <>\n                Party #{this.encounterIndex + 1} encountered a {this.encounters[this.encounterIndex].ToString()}\n                <div><button>Fight</button><button onClick={() => this.encounterIndex++}>Skip</button></div>\n                </> : <>Party #{this.encounterIndex + 1} did not encounter any game.<button onClick={() => this.encounterIndex++}>Continue</button></>)\n        }\n\n    </>\n}"
                    },
                    "GenerateEncounters": {
                      "@t": "MessageHandler",
                      "data": "function() {\n    let encounters = [];\n    for (let party of this.parties) {\n        let prob = this.state.GetGameEncounterProb(party);\n        if (World.Random.Chance(prob)) {\n            encounters.push(World.Random.Choice(this.gameEncounters));\n        } else {\n            encounters.push(null);\n        }\n    }\n    return encounters;\n}"
                    },
                    "gameEncounters": [
                      {
                        "@r": 12
                      }
                    ]
                  },
                  "slot_annotations": {},
                  "prototype_slots": [
                    "parent"
                  ]
                }
              },
              "Encounter": {
                "@r": 11
              },
              "BoarEncounter": {
                "@r": 12
              },
              "Terrain": {
                "@t": "ProtoObject",
                "data": {
                  "annotations": {
                    "name": "TerrainTypes"
                  },
                  "slot_values": {
                    "parent": {
                      "@r": 3
                    },
                    "Ground": {
                      "@r": 13
                    },
                    "TallGrass": {
                      "@t": "ProtoObject",
                      "data": {
                        "annotations": {
                          "name": "TallGrass"
                        },
                        "slot_values": {
                          "parent": {
                            "@r": 13
                          },
                          "backgroundColor": "green",
                          "description": "Tall Grass. Targets in tall grass have a lower chance of being hit by ranged weapons."
                        },
                        "slot_annotations": {},
                        "prototype_slots": [
                          "parent"
                        ]
                      }
                    },
                    "Rocks": {
                      "@t": "ProtoObject",
                      "data": {
                        "annotations": {
                          "name": "Rocks"
                        },
                        "slot_values": {
                          "parent": {
                            "@r": 13
                          },
                          "backgroundColor": "grey",
                          "description": "Rocks. Provides half cover."
                        },
                        "slot_annotations": {},
                        "prototype_slots": [
                          "parent"
                        ]
                      }
                    },
                    "Tree": {
                      "@t": "ProtoObject",
                      "data": {
                        "annotations": {},
                        "slot_values": {
                          "parent": {
                            "@r": 13
                          },
                          "backgroundColor": "#460C00",
                          "description": "Trees. Provides full cover."
                        },
                        "slot_annotations": {},
                        "prototype_slots": [
                          "parent"
                        ]
                      }
                    }
                  },
                  "slot_annotations": {},
                  "prototype_slots": [
                    "parent"
                  ]
                }
              },
              "Grid": {
                "@t": "ProtoObject",
                "data": {
                  "annotations": {
                    "name": "Grid"
                  },
                  "slot_values": {
                    "parent": {
                      "@r": 3
                    },
                    "New": {
                      "@t": "MessageHandler",
                      "data": "function(width, height) {\n    let inst = this.Extend();\n    \n    inst.width = width;\n    inst.height = height;\n    \n    inst.terrain = new Array(width * height);\n    inst.terrain.fill(World.FTS.Terrain.Ground);\n    inst.entities = new Map();\n    return inst;\n}"
                    },
                    "GetTerrainAt": {
                      "@t": "MessageHandler",
                      "data": "function(i, j) {\n    return this.terrain[i * this.width + j];\n}"
                    },
                    "SetTerrainAt": {
                      "@t": "MessageHandler",
                      "data": "function(i, j, terrain) {\n    this.terrain[i * this.width + j] = terrain;\n}"
                    },
                    "InBounds": {
                      "@t": "MessageHandler",
                      "data": "function(i, j) {\n    if (i < 0 || i >= this.height) return false;\n    if (j < 0 || j >= this.width) return false;\n    return true;\n}"
                    },
                    "AddEntityAt": {
                      "@t": "MessageHandler",
                      "data": "function(i, j, entity) {\n    this.entities.set(`${i},${j}`, entity);\n}"
                    },
                    "GetEntityAt": {
                      "@t": "MessageHandler",
                      "data": "function(i, j) {\n    return this.entities.get(`${i},${j}`);\n}"
                    }
                  },
                  "slot_annotations": {},
                  "prototype_slots": [
                    "parent"
                  ]
                }
              },
              "CombatWindow": {
                "@t": "ProtoObject",
                "data": {
                  "annotations": {},
                  "slot_values": {
                    "parent": {
                      "@r": 9
                    },
                    "New": {
                      "@t": "MessageHandler",
                      "data": "function() {\n    let inst = this.Extend();\n    inst.grid = World.FTS.Grid.New(10, 10);\n    return inst;\n}"
                    },
                    "RenderContent": {
                      "@t": "MessageHandler",
                      "data": "function() {\n    let rows = [];\n    for (let i = 0; i < this.grid.height; ++i) {\n        let cells = [];\n        for (let j = 0; j < this.grid.width; ++j) {\n            let terrain = this.grid.GetTerrainAt(i, j);\n            let entity = this.grid.GetEntityAt(i, j);\n            cells.push(<th\n                title={terrain.description}\n                style={{width: '40px',\n                        height: '40px',\n                        backgroundColor: terrain.backgroundColor}}>\n                        {entity ? <span title={entity.GetDescription()} style={{'fontSize': '30px', color: entity.color, textShadow: '1px 1px #000000'}}>{entity.character}</span> : \"\"}</th>);\n        }\n        rows.push(<tr>{cells}</tr>);\n    }\n    \n    return <table>{rows}</table>;\n}"
                    }
                  },
                  "slot_annotations": {},
                  "prototype_slots": [
                    "parent"
                  ]
                }
              },
              "Units": {
                "@t": "ProtoObject",
                "data": {
                  "annotations": {
                    "name": "Units"
                  },
                  "slot_values": {
                    "parent": {
                      "@r": 3
                    },
                    "Unit": {
                      "@r": 14
                    },
                    "Alien": {
                      "@r": 15
                    },
                    "Hunter": {
                      "@t": "ProtoObject",
                      "data": {
                        "annotations": {},
                        "slot_values": {
                          "parent": {
                            "@r": 14
                          },
                          "color": "green",
                          "character": "H",
                          "baseHP": 10
                        },
                        "slot_annotations": {},
                        "prototype_slots": [
                          "parent"
                        ]
                      }
                    },
                    "BlueMan": {
                      "@t": "ProtoObject",
                      "data": {
                        "annotations": {},
                        "slot_values": {
                          "parent": {
                            "@r": 15
                          },
                          "character": "B",
                          "color": "blue"
                        },
                        "slot_annotations": {},
                        "prototype_slots": [
                          "parent"
                        ]
                      }
                    }
                  },
                  "slot_annotations": {},
                  "prototype_slots": [
                    "parent"
                  ]
                }
              }
            },
            "slot_annotations": {},
            "prototype_slots": [
              "parent"
            ]
          }
        },
        "debug": false
      },
      "slot_annotations": {
        "Core": {
          "module": {
            "@r": 6
          }
        },
        "Modules": {
          "module": {
            "@r": 6
          }
        },
        "Interface": {
          "module": {
            "@r": 4
          }
        }
      },
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "Namespace",
        "description": "A namespace is a logical grouping of objects. It is a distinct concept from modules.",
        "creator": {
          "@r": 2
        },
        "creatorSlot": "Namespace"
      },
      "slot_values": {
        "parent": {
          "@r": 3
        }
      },
      "slot_annotations": {
        "parent": {
          "module": {
            "@r": 6
          }
        }
      },
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "Core",
        "description": "A collection of core objects that should exist in every world.",
        "creator": {
          "@r": 0
        },
        "creatorSlot": "Core"
      },
      "slot_values": {
        "parent": {
          "@r": 1
        },
        "TopObject": {
          "@r": 3
        },
        "Namespace": {
          "@r": 1
        },
        "Module": {
          "@r": 7
        }
      },
      "slot_annotations": {
        "TopObject": {
          "module": {
            "@r": 6
          }
        },
        "parent": {
          "module": {
            "@r": 6
          }
        },
        "Namespace": {
          "module": {
            "@r": 6
          }
        },
        "Module": {
          "module": {
            "@r": 6
          }
        }
      },
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "TopObject",
        "description": "TopObject at the top of the inheritance heirarchy. All objects should descend from this.",
        "creator": {
          "@r": 2
        },
        "creatorSlot": "TopObject"
      },
      "slot_values": {
        "AddSlot": {
          "@t": "MessageHandler",
          "data": "function(name, value) {\n  _AddSlot(this, name, value);\n}"
        },
        "Extend": {
          "@t": "MessageHandler",
          "data": "function(name, value) {\n  let child = _EmptyObject();\n  _AddSlot(child, 'parent', this)\n  _AddPrototypeSlot(child, 'parent')\n  return child;\n}"
        },
        "SetAnnotation": {
          "@t": "MessageHandler",
          "data": "\nfunction(name, value) {\n\t_SetAnnotation(this, name, value);\n}\n"
        },
        "GetAnnotation": {
          "@t": "MessageHandler",
          "data": "\nfunction(name) {\n\treturn _GetAnnotation(this, name);\n}\n"
        },
        "GetSlotNames": {
          "@t": "MessageHandler",
          "data": "\nfunction() {\n\treturn _GetSlotNames(this);\n}\n"
        },
        "CreateEditor": {
          "@t": "MessageHandler",
          "data": "\nfunction() {\n\treturn World.Interface.ObjectEditor.New(this);\n}\n"
        },
        "OpenEditor": {
          "@t": "MessageHandler",
          "data": "\nfunction() {\n\treturn this.CreateEditor().Open();\n}\n"
        },
        "ToString": {
          "@t": "MessageHandler",
          "data": "\nfunction() {\n\treturn this.GetAnnotation('name') || 'Unnamed Object';\n}\n"
        },
        "SetName": {
          "@t": "MessageHandler",
          "data": "function(name) {\n  this.SetAnnotation('name', name);\n}"
        },
        "SetDescription": {
          "@t": "MessageHandler",
          "data": "function(desc) {\n  this.SetAnnotation('description', desc);\n}"
        },
        "SetSlotAnnotation": {
          "@t": "MessageHandler",
          "data": "function(slot, name, value) { _SetSlotAnnotation(this, slot, name, value); }"
        },
        "SetSlotModule": {
          "@t": "MessageHandler",
          "data": "function(slot, module) {\n    this.SetSlotAnnotation(slot, 'module', module);\n}"
        },
        "SetCreator": {
          "@t": "MessageHandler",
          "data": "function(object, slot) {\n  this.SetAnnotation('creator', object);\n  this.SetAnnotation('creatorSlot', slot);\n}"
        },
        "GetCreator": {
          "@t": "MessageHandler",
          "data": "function() {\n    return this.GetAnnotation('creator');\n}"
        },
        "GetName": {
          "@t": "MessageHandler",
          "data": "function() {\n    return this.GetAnnotation('name');\n}"
        },
        "GetDescription": {
          "@t": "MessageHandler",
          "data": "function() {\n    return this.GetAnnotation('description');\n}"
        },
        "GetSlotAnnotation": {
          "@t": "MessageHandler",
          "data": "function(slot, name) {\n    return _GetSlotAnnotation(this, slot, name);\n}"
        },
        "GetSlotModule": {
          "@t": "MessageHandler",
          "data": "function(slot) {\n    return this.GetSlotAnnotation(slot, \"module\");\n}"
        },
        "ListModules": {
          "@t": "MessageHandler",
          "data": "function() {\n    let modules = new Set();\n    for (let slot of this.GetSlotNames()) {\n        let module = this.GetSlotModule(slot);\n        if (module) modules.add(module);\n    }\n    return modules;\n}"
        },
        "RenderWidget": {
          "@t": "MessageHandler",
          "data": "function() {\n    return <button\n              title={this.GetDescription()}\n              onClick={() => this.OpenEditor()}>\n              {this.ToString()}\n            </button>;\n}"
        },
        "SetSlotDescription": {
          "@t": "MessageHandler",
          "data": "function(slot, desc) {\n    this.SetSlotAnnotation(slot, \"description\", desc);\n}"
        },
        "GetSlotDescription": {
          "@t": "MessageHandler",
          "data": "function(slot) {\n    return this.GetSlotAnnotation(slot, 'description')\n}"
        },
        "AddMessageHandler": {
          "@t": "MessageHandler",
          "data": "function(slot) {\n    this.AddSlot(slot, _MakeMessageHandler('function() {\\n}'))\n}"
        },
        "SetSlotCategory": {
          "@t": "MessageHandler",
          "data": "function(slot, category) {\n    this.SetSlotAnnotation(slot, \"category\", category);\n}"
        },
        "GetSlotCategory": {
          "@t": "MessageHandler",
          "data": "function(slot) {\n    return this.GetSlotAnnotation(slot, \"category\");\n}"
        },
        "ListCategories": {
          "@t": "MessageHandler",
          "data": "function() {\n    let categories = new Set();\n    for (let slot of this.GetSlotNames()) {\n        let cat = this.GetSlotCategory(slot);\n        if (cat) categories.add(cat);\n    }\n    return categories;\n}"
        },
        "GetSlotsByCategory": {
          "@t": "MessageHandler",
          "data": "function(cat) {\n    return this.GetSlotNames().filter(slot => this.GetSlotCategory(slot) == cat)\n}"
        },
        "GetSlotAnnotations": {
          "@t": "MessageHandler",
          "data": "function(slot) {\n    return _GetSlotAnnotations(this, slot)\n}"
        },
        "SetModule": {
          "@t": "MessageHandler",
          "data": "function(module) {\n    for (let slot of this.GetSlotNames()) {\n        this.SetSlotModule(slot, module);\n    }\n}"
        }
      },
      "slot_annotations": {
        "OpenEditor": {
          "module": {
            "@r": 4
          },
          "category": "editor"
        },
        "CreateEditor": {
          "module": {
            "@r": 4
          },
          "category": "editor"
        },
        "AddSlot": {
          "description": "Takes in a slot name and value, and creates a slot on this object.",
          "module": {
            "@r": 6
          }
        },
        "Extend": {
          "description": "Creates a new object with this object as a parent.",
          "module": {
            "@r": 6
          }
        },
        "RenderWidget": {
          "category": "editor",
          "module": {
            "@r": 4
          }
        },
        "SetSlotCategory": {
          "category": "categories",
          "module": {
            "@r": 6
          }
        },
        "GetSlotCategory": {
          "category": "categories",
          "module": {
            "@r": 6
          }
        },
        "ListCategories": {
          "category": "categories",
          "module": {
            "@r": 6
          }
        },
        "GetSlotsByCategory": {
          "category": "categories",
          "module": {
            "@r": 6
          }
        },
        "SetAnnotation": {
          "module": {
            "@r": 6
          }
        },
        "GetAnnotation": {
          "module": {
            "@r": 6
          }
        },
        "GetSlotNames": {
          "module": {
            "@r": 6
          }
        },
        "ToString": {
          "module": {
            "@r": 6
          }
        },
        "SetName": {
          "module": {
            "@r": 6
          }
        },
        "SetDescription": {
          "module": {
            "@r": 6
          }
        },
        "SetSlotAnnotation": {
          "module": {
            "@r": 6
          }
        },
        "SetSlotModule": {
          "module": {
            "@r": 6
          }
        },
        "SetCreator": {
          "module": {
            "@r": 6
          }
        },
        "GetCreator": {
          "module": {
            "@r": 6
          }
        },
        "GetName": {
          "module": {
            "@r": 6
          }
        },
        "GetDescription": {
          "module": {
            "@r": 6
          }
        },
        "GetSlotAnnotation": {
          "module": {
            "@r": 6
          }
        },
        "GetSlotModule": {
          "module": {
            "@r": 6
          }
        },
        "ListModules": {
          "module": {
            "@r": 6
          }
        },
        "SetSlotDescription": {
          "module": {
            "@r": 6
          }
        },
        "GetSlotDescription": {
          "module": {
            "@r": 6
          }
        },
        "AddMessageHandler": {
          "module": {
            "@r": 6
          }
        },
        "GetSlotAnnotations": {
          "module": {
            "@r": 6
          }
        },
        "SetModule": {
          "module": {
            "@r": 6
          }
        }
      },
      "prototype_slots": []
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "InterfaceModule",
        "creator": {
          "@r": 5
        },
        "creatorSlot": "interface"
      },
      "slot_values": {
        "parent": {
          "@r": 7
        }
      },
      "slot_annotations": {
        "parent": {
          "module": {
            "@r": 4
          }
        }
      },
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "Modules",
        "description": "An object that contains all of the modules currently loaded into the program. You can launch modules from here in order to write them out to a file.",
        "creator": {
          "@r": 0
        },
        "creatorSlot": "Modules"
      },
      "slot_values": {
        "parent": {
          "@r": 3
        },
        "interface": {
          "@r": 4
        },
        "init": {
          "@r": 6
        }
      },
      "slot_annotations": {
        "init": {
          "module": {
            "@r": 6
          }
        },
        "interface": {
          "module": {
            "@r": 4
          }
        }
      },
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "InitModule",
        "creator": {
          "@r": 5
        },
        "creatorSlot": "init"
      },
      "slot_values": {
        "parent": {
          "@r": 7
        }
      },
      "slot_annotations": {
        "parent": {
          "module": {
            "@r": 6
          }
        }
      },
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "Module",
        "description": "The traits object for modules.",
        "creator": {
          "@r": 2
        },
        "creatorSlot": "Module"
      },
      "slot_values": {
        "parent": {
          "@r": 3
        },
        "FindSlots": {
          "@t": "MessageHandler",
          "data": "function() {\n  // Get all slots in objects tagged with the module.\n  let visited = new Set();\n  let slots = [];\n\n  var findSlots = (object) => {\n    if(!_IsProtoObject(object)) return;\n    if(visited.has(object)) return;\n\n    visited.add(object);\n    for(let slot of object.GetSlotNames()) {\n      if (_GetSlotAnnotation(object, slot, 'module') == this) {\n        slots.push({object, slot});\n      }\n      findSlots(object[slot]);\n    }\n  }\n\n  findSlots(World);\n  return slots;\n}"
        },
        "GenerateCode": {
          "@t": "MessageHandler",
          "data": "function() {\n  let slots = this.FindSlots();\n\n  let code = this.prelude;\n  for (let {object, slot} of slots) {\n    let path = this.TracePath(object);\n\n    let value = object[slot];\n    let objpath = path.join('.');\n\n    let valueExpr = null;\n    if(_IsProtoObject(value) && _GetAnnotation(value, 'creator') == object && _GetAnnotation(value, 'creatorSlot') == slot) {\n        let path = this.TracePath(value);\n        \n        let objAnnotations = \"\";\n        for (let annotation of _GetAnnotations(value)) {\n            let annotationVal = _GetAnnotation(value, annotation);\n            objAnnotations += `_SetAnnotation(object, \"${annotation}\", ${this.GenerateValueExpression(annotationVal)})\\n`;\n        }\n        \n        valueExpr = `(function() {\n            let object = ref(\"${path.join('.')}\");\n            ${objAnnotations}\n            return object;\n        })()`;\n    } else {\n        valueExpr = this.GenerateValueExpression(value)\n    }\n    code += `_AddSlot(ref(\"${objpath}\"), \"${slot}\", ${valueExpr});\\n`\n    if(_IsPrototypeSlot(object, slot)) {\n        code += `_AddPrototypeSlot(ref(\"${objpath}\"), \"${slot}\")\\n`;\n    }\n    \n    let annotations = object.GetSlotAnnotations(slot);\n    for (let annotation of annotations) {\n        let value = object.GetSlotAnnotation(slot, annotation);\n        let valueExpr = this.GenerateValueExpression(value);\n        code += `_SetSlotAnnotation(ref(\"${objpath}\"), \"${slot}\", \"${annotation}\", ${valueExpr});\\n`\n    }\n\n    code += '\\n';\n  }\n\n  return code;\n}"
        },
        "Export": {
          "@t": "MessageHandler",
          "data": "function() {\n  let code = this.GenerateCode();\n  var blob = new Blob([code], {type: \"text/plain;charset=utf-8\"});\n  FileSaver.saveAs(blob, \"module.js\");\n}"
        },
        "TracePath": {
          "@t": "MessageHandler",
          "data": "function(object) {\n    if (object == World) return ['World'];\n    else {\n        let creator = _GetAnnotation(object, 'creator');\n        let creatorSlot = _GetAnnotation(object, 'creatorSlot');\n        if (!creator || !creatorSlot)\n            throw new Error(`${object.ToString()} missing creator slot.`);\n        if (creator[creatorSlot] != object)\n            throw new Error(`${object.ToString()}'s creator slot doesn't actually point to it.`);\n        \n        var path = this.TracePath(creator);\n        path.push(creatorSlot);\n        return path;\n    }\n}"
        },
        "prelude": "function ref(path) {\n    var parts = path.split('.');\n\tvar current = window;\n\tfor(let part of parts) {\n\t  current = (current[part] = current[part] || _EmptyObject());\n    }\n\treturn current;\n}\n\n",
        "GenerateValueExpression": {
          "@t": "MessageHandler",
          "data": "function(value) {\n    if (_IsMessageHandler(value)) {\n      let handlerCode = _GetMessageHandlerCode(value);\n      let escapedCode = escapeTemplateString(handlerCode);\n      return `_MakeMessageHandler(${escapedCode})`\n    } else if (_IsProtoObject(value)) {\n      return `ref(\"${this.TracePath(value).join('.')}\")`;\n    } else if (typeof value == \"string\") {\n        return escapeTemplateString(value);\n    } else if (typeof value == \"number\") {\n        return JSON.stringify(value);\n    } else {\n      throw new Error(`Encountered an object of Unknown type.`);\n    }\n}"
        }
      },
      "slot_annotations": {
        "GenerateCode": {
          "module": {
            "@r": 6
          }
        },
        "FindSlots": {
          "module": {
            "@r": 6
          },
          "description": "Find all slots that have been annotated with this module."
        },
        "Export": {
          "module": {
            "@r": 4
          }
        },
        "parent": {
          "module": {
            "@r": 6
          }
        },
        "TracePath": {
          "module": {
            "@r": 6
          }
        },
        "prelude": {
          "module": {
            "@r": 6
          }
        },
        "GenerateValueExpression": {
          "module": {
            "@r": 6
          }
        }
      },
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "Interface",
        "description": "A collection of objects related to the user interface.",
        "creator": {
          "@r": 0
        },
        "creatorSlot": "Interface"
      },
      "slot_values": {
        "parent": {
          "@r": 1
        },
        "WindowManager": {
          "@t": "ProtoObject",
          "data": {
            "annotations": {
              "name": "WindowManager",
              "description": "The window manager and entry point for the render and update main loop.",
              "creator": {
                "@r": 8
              },
              "creatorSlot": "WindowManager"
            },
            "slot_values": {
              "windows": [],
              "Render": {
                "@t": "MessageHandler",
                "data": "function() {\n  return <>\n    {World.Interface.MainMenu.Render()}\n    {(this.windows || []).map(w => w.Render())}</>\n}"
              },
              "Update": {
                "@t": "MessageHandler",
                "data": "function(dt) {\n    World.Interface.MainMenu.Update(dt);\n    (this.windows || []).forEach(w => w.Update(dt));\n}"
              },
              "AddWindow": {
                "@t": "MessageHandler",
                "data": "function(window) {\n    this.windows = this.windows || [];\n    this.windows.push(window);\n}"
              },
              "RemoveWindow": {
                "@t": "MessageHandler",
                "data": "function(window) {\n    this.windows = this.windows || [];\n    this.windows = this.windows.filter(item => item !== window);\n}"
              },
              "parent": {
                "@r": 3
              }
            },
            "slot_annotations": {
              "RemoveWindow": {
                "module": {
                  "@r": 4
                }
              },
              "AddWindow": {
                "module": {
                  "@r": 4
                }
              },
              "Update": {
                "module": {
                  "@r": 4
                }
              },
              "Render": {
                "module": {
                  "@r": 4
                }
              },
              "windows": {
                "module": null
              },
              "parent": {
                "module": {
                  "@r": 4
                }
              }
            },
            "prototype_slots": [
              "parent"
            ]
          }
        },
        "Window": {
          "@r": 9
        },
        "HandlerEditor": {
          "@t": "ProtoObject",
          "data": {
            "annotations": {
              "name": "HandlerEditor",
              "description": "The default editor for message handlers.",
              "creator": {
                "@r": 8
              },
              "creatorSlot": "HandlerEditor"
            },
            "slot_values": {
              "parent": {
                "@r": 9
              },
              "RenderContent": {
                "@t": "MessageHandler",
                "data": "function() {\n  return [\n    <AceEditor style={{width: '100%'}} mode=\"jsx\" theme=\"monokai\" value={this.code} onChange={(value) => this.code = value}/>,\n    <button onClick={() => this.target[this.slot] = _MakeMessageHandler(this.code)}>Save</button>\n  ];\n}"
              },
              "New": {
                "@t": "MessageHandler",
                "data": "function(target, slot) {\n  let inst = this.Extend();\n  inst.AddSlot('target', target);\n  inst.AddSlot('slot', slot);\n  inst.AddSlot('code', _GetMessageHandlerCode(target[slot]));\n  inst.AddSlot('windowID', uuid.v1());\n  return inst;\n}"
              },
              "GetTitle": {
                "@t": "MessageHandler",
                "data": "function() {\n return \"HandlerEditor: \" + this.target.toString() + \"->\" + this.slot;\n}"
              }
            },
            "slot_annotations": {
              "parent": {
                "module": {
                  "@r": 4
                }
              },
              "RenderContent": {
                "module": {
                  "@r": 4
                }
              },
              "New": {
                "module": {
                  "@r": 4
                }
              },
              "GetTitle": {
                "module": {
                  "@r": 4
                }
              }
            },
            "prototype_slots": [
              "parent"
            ]
          }
        },
        "ObjectEditor": {
          "@t": "ProtoObject",
          "data": {
            "annotations": {
              "name": "ObjectEditor",
              "description": "The default editor for objects.",
              "creator": {
                "@r": 8
              },
              "creatorSlot": "ObjectEditor"
            },
            "slot_values": {
              "parent": {
                "@r": 9
              },
              "GetTitle": {
                "@t": "MessageHandler",
                "data": "function() {\n    return `${(this.target.GetAnnotation('name') || \"Unnamed Object\")} (Object Editor)`;\n}"
              },
              "RenderContent": {
                "@t": "MessageHandler",
                "data": "function() {\n  let description = this.target.GetAnnotation(\"description\");\n  let modules = Array.from(this.target.ListModules());\n  let categories = Array.from(this.target.ListCategories());\n\n  return (\n    <div>\n      {description ? (\n        <>\n          <div>{description}</div>\n          <hr />\n        </>\n      ) : null}\n      <div>\n        <b>Modules:</b>\n        {modules.length > 0 ? (\n          modules.map(m => m.RenderWidget())\n        ) : (\n          <span> none</span>\n        )}\n      </div>\n      <hr />\n      <div><b>Slots</b></div>\n      <div style={{ paddingTop: '5px'}}>\n        <div ><em>uncategorized</em></div>\n        <div style={{ paddingLeft: '5px'}}>{this.target.GetSlotsByCategory(null).map(slot => this.RenderSlot(slot))}</div>\n      </div>\n      {categories.map(cat => <div style={{ paddingTop: '5px'}}>\n          <div ><em>{cat}</em></div>\n          <div style={{ paddingLeft: '5px'}}>{this.target.GetSlotsByCategory(cat).map(slot => this.RenderSlot(slot))}</div>\n      </div>)}\n      <hr />\n      <ReactConsole\n        welcomeMessage={`Evaluator for ${this.target.ToString()}.`}\n        ref={e => (this.evaluator = e)}\n        handler={code => {\n          function evalInContext() {\n            return eval(code);\n          }\n\n          try {\n             let result = evalInContext.call(this.target);\n             this.evaluator.log(new String(result));\n          } catch (e) {\n            this.evaluator.log(new String(e));\n          }\n          this.evaluator.return();\n        }}\n      />\n    </div>\n  );\n}"
              },
              "New": {
                "@t": "MessageHandler",
                "data": "function(target) {\n    let inst = this.Extend();\n    inst.AddSlot('target', target);\n    inst.AddSlot('windowID', uuid.v1());\n    return inst;\n}"
              },
              "RenderSlot": {
                "@t": "MessageHandler",
                "data": "function(slot) {\n    let value = this.target[slot];\n    let description = this.target.GetSlotDescription(slot);\n    \n    let namespan = _IsPrototypeSlot(this.target, slot) ? <b>{slot}*</b> : slot;\n    \n    let slotspan = null;\n    if (_IsMessageHandler(value)) {\n      slotspan = <button onClick= {() =>\n              World.Interface.HandlerEditor.New(this.target, slot).Open()}>Edit Code</button>;\n    } else if (_IsProtoObject(value)) {\n      slotspan = value.RenderWidget();\n    } else if (typeof value == \"number\") {\n        slotspan = value;\n    } else {\n        slotspan = new String(value);\n    }\n    \n    return <div key={slot} style={{\n            paddingBottom: '5px',\n            display: 'flex',\n            'justifyContent': 'space-between',\n            'alignItems': 'flex-end',\n            'flexWrap': 'wrap'\n    }}>\n        <span title={description}>{namespan}</span>\n        <span>{slotspan}</span>\n    </div>;\n}"
              }
            },
            "slot_annotations": {
              "GetTitle": {
                "module": {
                  "@r": 4
                }
              },
              "RenderContent": {
                "module": {
                  "@r": 4
                }
              },
              "New": {
                "module": {
                  "@r": 4
                }
              },
              "parent": {
                "module": {
                  "@r": 4
                }
              },
              "RenderSlot": {
                "module": {
                  "@r": 4
                }
              }
            },
            "prototype_slots": [
              "parent"
            ]
          }
        },
        "MainMenu": {
          "@t": "ProtoObject",
          "data": {
            "annotations": {
              "description": "The Main Menu at the top of the screen.",
              "name": "MainMenu",
              "creator": {
                "@r": 8
              },
              "creatorSlot": "MainMenu"
            },
            "slot_values": {
              "parent": {
                "@r": 9
              },
              "left": 0,
              "top": 0,
              "Render": {
                "@t": "MessageHandler",
                "data": "function() {\n  let isMobile = MobileDetect.mobile() !== null;\n  let barStyle = isMobile ? {\n     'backgroundColor': '#285477',\n     width: '100%',\n     display: 'flex'\n   } : {\n     'backgroundColor': '#285477',\n     'position': 'fixed',\n     top: '0px',\n     left: '0px',\n     width: '100%',\n     display: 'flex'\n   };\n   \n  return <div\n    style={barStyle}>\n   <button onClick={() => {\n     var blob = new Blob([_SaveImage(World)], {type: \"text/plain;charset=utf-8\"});\n     FileSaver.saveAs(blob, \"image.json\");\n   }}>Save Image</button>\n   <button onClick={() => {\n        var fileInput = document.getElementById('file-input');\n        var changeHandler = function() {\n          var file = fileInput.files[0];\n\n          if (file.name.match(/\\.(txt|json)$/)) {\n            var reader = new FileReader();\n\n            reader.onload = function() {\n              // console.log(JSON.parse(reader.result));\n              _LoadImage(JSON.parse(reader.result));\n            };\n\n            reader.readAsText(file);    \n          } else {\n           alert(\"File not supported, .txt or .json files only\");\n          }\n\n          fileInput.removeEventListener('change', changeHandler);\n          this.value = null;\n        }\n         \n        fileInput.addEventListener('change', changeHandler);\n\n       fileInput.click();\n   }}>Open Image</button>\n   <button onClick={() => {\n     World.Interface.ObjectEditor.New(World).Open();\n   }}>Open World</button>\n    <button onClick={() => {\n        var fileInput = document.getElementById('file-input');\n        var changeHandler = function() {\n          var file = fileInput.files[0];\n\n          if (file.name.match(/\\.js$/)) {\n            var reader = new FileReader();\n\n            reader.onload = function() {\n              eval(reader.result);\n            };\n\n            reader.readAsText(file);    \n          } else {\n           alert(\"File not supported, .js files only\");\n          }\n\n          fileInput.removeEventListener('change', changeHandler);\n          this.value = null;\n        }\n         \n        fileInput.addEventListener('change', changeHandler);\n\n       fileInput.click();\n   }}>Load Module</button>\n    <button onClick={() => {\n     World.debug = !World.debug;\n   }}>Toggle Debug</button>\n   \n    <button onClick={() => {\n     World.FTS.GameState.New().OpenGameWindow()\n   }}>From the Stars</button>\n  </div>;\n}"
              },
              "windowID": "mainmenu"
            },
            "slot_annotations": {
              "parent": {
                "module": {
                  "@r": 4
                }
              },
              "left": {
                "module": {
                  "@r": 4
                }
              },
              "top": {
                "module": {
                  "@r": 4
                }
              },
              "Render": {
                "module": {
                  "@r": 4
                }
              },
              "windowID": {
                "module": {
                  "@r": 4
                }
              }
            },
            "prototype_slots": [
              "parent"
            ]
          }
        }
      },
      "slot_annotations": {
        "parent": {
          "module": {
            "@r": 4
          }
        },
        "WindowManager": {
          "module": {
            "@r": 4
          }
        },
        "Window": {
          "module": {
            "@r": 4
          }
        },
        "HandlerEditor": {
          "module": {
            "@r": 4
          }
        },
        "ObjectEditor": {
          "module": {
            "@r": 4
          }
        },
        "MainMenu": {
          "module": {
            "@r": 4
          }
        }
      },
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "Window",
        "creator": {
          "@r": 8
        },
        "creatorSlot": "Window"
      },
      "slot_values": {
        "parent": {
          "@r": 3
        },
        "top": 0,
        "left": 0,
        "Open": {
          "@t": "MessageHandler",
          "data": "function() { World.Interface.WindowManager.AddWindow(this) }"
        },
        "Close": {
          "@t": "MessageHandler",
          "data": "function() { World.Interface.WindowManager.RemoveWindow(this) }"
        },
        "Update": {
          "@t": "MessageHandler",
          "data": "function(dt) {\n    if (this.windowDiv && this.windowDiv instanceof HTMLElement) {\n        this.width = this.windowDiv.offsetWidth;\n        this.height = this.windowDiv.offsetHeight;\n    }\n}"
        },
        "RenderContent": {
          "@t": "MessageHandler",
          "data": "function() { }"
        },
        "GetTitle": {
          "@t": "MessageHandler",
          "data": "function() { return 'Untitled Window'; }"
        },
        "Render": {
          "@t": "MessageHandler",
          "data": "function() {\n  let isMobile = MobileDetect.mobile() !== null;\n  \n  let windowStyle = isMobile ? {\n        border: \"1px solid black\",\n        boxShadow: \"5px 5px 5px rgba(0, 0, 0, 0.5)\",\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        backgroundColor: \"#f1f1f1\",\n        marginTop: '10px',\n        marginBottom: '10px',\n      } : {\n        resize: \"both\",\n        overflow: \"auto\",\n        border: \"1px solid black\",\n        position: \"absolute\",\n        backgroundColor: \"#f1f1f1\",\n        top: this.top + \"px\",\n        left: this.left + \"px\",\n        width: this.width + \"px\",\n        height: this.height + \"px\",\n        boxShadow: \"5px 5px 5px rgba(0, 0, 0, 0.5)\",\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        boxSizing: 'border-box'\n      };\n      \n  return (\n    <div\n      key={this.windowID}\n      style={windowStyle}\n      ref={(div) => this.windowDiv = div}\n    >\n      <div\n        style={{\n          \"backgroundColor\": \"#285477\",\n          padding: \"3px\",\n          color: \"white\",\n          cursor: \"move\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          flexShrink: 0\n        }}\n        onMouseDown={e => {\n          var x = e.clientX;\n          var y = e.clientY;\n\n          document.onmousemove = e => {\n            var dx = e.clientX - x;\n            var dy = e.clientY - y;\n            x = e.clientX;\n            y = e.clientY;\n\n            this.left = this.left + dx;\n            this.top = this.top + dy;\n          };\n\n          document.onmouseup = () => {\n            document.onmouseup = null;\n            document.onmousemove = null;\n          };\n        }}\n      >\n        <b>{this.GetTitle()}</b>\n        <span>\n          <i\n            className=\"fas fa-search\"\n            title=\"Inspect Window Object\"\n            style={{ cursor: \"default\", marginRight: \"5px\" }}\n            onClick={() =>\n              World.Interface.ObjectEditor.New(this).Open()\n            }\n          />\n          <i\n            className=\"fas fa-times\"\n            title=\"Close Window\"\n            style={{ cursor: \"default\" }}\n            onClick={() => this.Close()}\n          />\n        </span>\n      </div>\n      <div style={{ padding: \"5px\", flexGrow: 1, overflow: 'auto', marginBottom: '10px' }}>{this.RenderContent()}</div>\n    </div>\n  );\n}"
        },
        "width": 400,
        "height": 400
      },
      "slot_annotations": {
        "parent": {
          "module": {
            "@r": 4
          }
        },
        "top": {
          "module": {
            "@r": 4
          }
        },
        "left": {
          "module": {
            "@r": 4
          }
        },
        "Open": {
          "module": {
            "@r": 4
          }
        },
        "Close": {
          "module": {
            "@r": 4
          }
        },
        "Update": {
          "module": {
            "@r": 4
          }
        },
        "RenderContent": {
          "module": {
            "@r": 4
          }
        },
        "GetTitle": {
          "module": {
            "@r": 4
          }
        },
        "Render": {
          "module": {
            "@r": 4
          }
        },
        "width": {
          "module": {
            "@r": 4
          }
        },
        "height": {
          "module": {
            "@r": 4
          }
        }
      },
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {},
      "slot_values": {
        "parent": {
          "@r": 3
        }
      },
      "slot_annotations": {},
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "Encounter",
        "description": "An encounter is a battle that takes place between Hunters and enemies, be it game or aliens."
      },
      "slot_values": {
        "parent": {
          "@r": 3
        }
      },
      "slot_annotations": {},
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "BoarEncounter"
      },
      "slot_values": {
        "parent": {
          "@r": 11
        }
      },
      "slot_annotations": {},
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "Ground"
      },
      "slot_values": {
        "parent": {
          "@r": 3
        },
        "backgroundColor": "white",
        "character": "",
        "description": "Ground. Provides no cover."
      },
      "slot_annotations": {},
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "Unit",
        "description": "The base unit class."
      },
      "slot_values": {
        "parent": {
          "@r": 3
        },
        "character": "U",
        "color": "black",
        "GetDescription": {
          "@t": "MessageHandler",
          "data": "function() {\n    return \"Default Unit Description\";\n}"
        }
      },
      "slot_annotations": {},
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {},
      "slot_values": {
        "parent": {
          "@r": 14
        }
      },
      "slot_annotations": {},
      "prototype_slots": [
        "parent"
      ]
    }
  }
]
