[
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "RootPackage",
        "description": "The root package. All objects in the world should be accessible from here. If not, they will not be persisited in the live image."
      },
      "slot_values": {
        "parent": {
          "@r": 1
        },
        "CorePackage": {
          "@t": "ProtoObject",
          "data": {
            "annotations": {
              "name": "CorePackage"
            },
            "slot_values": {
              "parent": {
                "@r": 1
              },
              "TopObject": {
                "@r": 2
              },
              "TraitsPackage": {
                "@r": 1
              }
            },
            "slot_annotations": {},
            "prototype_slots": [
              "parent"
            ]
          }
        },
        "InterfacePackage": {
          "@t": "ProtoObject",
          "data": {
            "annotations": {
              "name": "InterfacePackage"
            },
            "slot_values": {
              "parent": {
                "@r": 1
              },
              "WindowManager": {
                "@t": "ProtoObject",
                "data": {
                  "annotations": {
                    "name": "WindowManager"
                  },
                  "slot_values": {
                    "windows": [
                      {
                        "@r": 4
                      }
                    ],
                    "Render": {
                      "@t": "MessageHandler",
                      "data": "function() { return h('div', null, this.windows.map(w => w.Render())); }"
                    },
                    "Update": {
                      "@t": "MessageHandler",
                      "data": "function(dt) { this.windows.forEach(w => w.Update(dt)); }"
                    },
                    "AddWindow": {
                      "@t": "MessageHandler",
                      "data": "function(window) { this.windows.push(window); }"
                    },
                    "RemoveWindow": {
                      "@t": "MessageHandler",
                      "data": "function(window) { this.windows = this.windows.filter(item => item !== window); }"
                    },
                    "parent": {
                      "@r": 2
                    }
                  },
                  "slot_annotations": {},
                  "prototype_slots": [
                    "parent"
                  ]
                }
              },
              "TraitsWindow": {
                "@r": 3
              },
              "HandlerEditor": {
                "@t": "ProtoObject",
                "data": {
                  "annotations": {
                    "name": "HandlerEditor",
                    "description": "The default editor for message handlers."
                  },
                  "slot_values": {
                    "parent": {
                      "@r": 3
                    },
                    "RenderContent": {
                      "@t": "MessageHandler",
                      "data": "function() { return [h('div', null, ['Editing Slot ', this.slot]), h('textarea', {onkeyup: (e) => this.code = e.target.value}, this.code), h('button', {onclick: () => this.target[this.slot] = _MakeMessageHandler(this.code)}, 'Save')]; }"
                    },
                    "New": {
                      "@t": "MessageHandler",
                      "data": "function(target, slot) { let inst = this.Extend(); inst.AddSlot('target', target); inst.AddSlot('slot', slot); inst.AddSlot('code', _GetMessageHandlerCode(target[slot])); return inst; }"
                    },
                    "GetTitle": {
                      "@t": "MessageHandler",
                      "data": "function() {\n return \"HandlerEditor: \" + this.target.toString() + \"->\" + this.slot;\n}"
                    }
                  },
                  "slot_annotations": {},
                  "prototype_slots": [
                    "parent"
                  ]
                }
              },
              "ObjectEditor": {
                "@t": "ProtoObject",
                "data": {
                  "annotations": {
                    "name": "ObjectEditor",
                    "description": "The default editor for objects."
                  },
                  "slot_values": {
                    "parent": {
                      "@r": 3
                    },
                    "GetTitle": {
                      "@t": "MessageHandler",
                      "data": "function() {\n    return `${(this.target.GetAnnotation('name') || \"Unnamed Object\")} (Object Editor)`;\n}"
                    },
                    "RenderContent": {
                      "@t": "MessageHandler",
                      "data": "function() {\n  let description = this.target.GetAnnotation('description');\n  return h('div', null, [\n    description ? [\n      description,\n      h('hr')\n    ] : null,\n    h('div', null, h('b', null, 'Slots')),\n    this.target.GetSlotNames().map(slot => {\n      let value = this.target[slot]; \n      if (_IsMessageHandler(value)) {\n        return [h('div', null, slot), h('button', {onclick: () => RootPackage.InterfacePackage.HandlerEditor.New(this.target, slot).Open() }, ['Edit Code'])];\n      }\n      if (_IsProtoObject(value)) {\n        return h('div', null, [slot + \" \", h('button', {onclick: () => value.OpenEditor() }, value.toString()) ]);\n      }\n      return h('div', null, [slot, value.toString() ]);\n   }),\n     h('hr')\n   ]);\n}"
                    },
                    "New": {
                      "@t": "MessageHandler",
                      "data": "function(target) { let inst = this.Extend(); inst.AddSlot('target', target); return inst; }"
                    }
                  },
                  "slot_annotations": {},
                  "prototype_slots": [
                    "parent"
                  ]
                }
              },
              "MainMenu": {
                "@r": 4
              }
            },
            "slot_annotations": {},
            "prototype_slots": [
              "parent"
            ]
          }
        }
      },
      "slot_annotations": {},
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "TraitsPackage"
      },
      "slot_values": {
        "parent": {
          "@r": 2
        }
      },
      "slot_annotations": {},
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "TopObject"
      },
      "slot_values": {
        "AddSlot": {
          "@t": "MessageHandler",
          "data": "function(name, value) {\n  _AddSlot(this, name, value);\n}"
        },
        "Extend": {
          "@t": "MessageHandler",
          "data": "function(name, value) {\n  let child = _EmptyObject();\n  _AddSlot(child, 'parent', this)\n  _AddPrototypeSlot(child, 'parent')\n  return child;\n}"
        },
        "SetAnnotation": {
          "@t": "MessageHandler",
          "data": "\nfunction(name, value) {\n\t_SetAnnotation(this, name, value);\n}\n"
        },
        "GetAnnotation": {
          "@t": "MessageHandler",
          "data": "\nfunction(name) {\n\treturn _GetAnnotation(this, name);\n}\n"
        },
        "GetSlotNames": {
          "@t": "MessageHandler",
          "data": "\nfunction() {\n\treturn _GetSlotNames(this);\n}\n"
        },
        "CreateEditor": {
          "@t": "MessageHandler",
          "data": "\nfunction() {\n\treturn RootPackage.InterfacePackage.ObjectEditor.New(this);\n}\n"
        },
        "OpenEditor": {
          "@t": "MessageHandler",
          "data": "\nfunction() {\n\treturn this.CreateEditor().Open();\n}\n"
        }
      },
      "slot_annotations": {},
      "prototype_slots": []
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "TraitsWindow"
      },
      "slot_values": {
        "parent": {
          "@r": 2
        },
        "top": 0,
        "left": 0,
        "Open": {
          "@t": "MessageHandler",
          "data": "function() { RootPackage.InterfacePackage.WindowManager.AddWindow(this) }"
        },
        "Close": {
          "@t": "MessageHandler",
          "data": "function() { RootPackage.InterfacePackage.WindowManager.RemoveWindow(this) }"
        },
        "Update": {
          "@t": "MessageHandler",
          "data": "function(dt) {}"
        },
        "RenderContent": {
          "@t": "MessageHandler",
          "data": "function() { }"
        },
        "GetTitle": {
          "@t": "MessageHandler",
          "data": "function() { return 'Untitled Window'; }"
        },
        "Render": {
          "@t": "MessageHandler",
          "data": "function() {\n  return h('div', { style: {\n      resize: 'both',\n      overflow: 'auto',\n      border: '1px solid black',\n      position: 'absolute',\n      'background-color': '#f1f1f1',\n      top: this.top + 'px',\n      left: this.left + 'px',\n      'box-shadow': '5px 5px 5px rgba(0, 0, 0, 0.5)'\n    } }, [\n    h('div', {style: {\n       'background-color': '#285477', padding: '3px', color: 'white', cursor: 'move',\n       display: 'flex', 'justify-content': 'space-between' },\n       onmousedown: (e) => {\n         var x = e.clientX;\n         var y = e.clientY;\n\n         document.onmousemove = (e) => {\n           var dx = e.clientX - x;\n           var dy = e.clientY - y;\n           x = e.clientX;\n           y = e.clientY;\n\n           this.left = this.left + dx;\n           this.top = this.top + dy;\n         };\n\n         document.onmouseup = () => {\n            document.onmouseup = null;\n            document.onmousemove = null;\n         };\n       }}, [\n      h('b', null, this.GetTitle()),\n      h('span', {}, [\n        h('i.fas.fa-search', {title: \"Inspect Window Object\", style: {cursor: 'default', 'margin-right': '5px'}, onclick: () => RootPackage.InterfacePackage.ObjectEditor.New(this).Open() }),\n        h('i.fas.fa-times', {title: \"Close Window\", style: {cursor: 'default'}, onclick: () => this.Close()}),\n        ]),\n    ]),\n    h('div', { style: {padding: '5px'}}, this.RenderContent())\n  ]);\n}"
        }
      },
      "slot_annotations": {},
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {},
      "slot_values": {
        "parent": {
          "@r": 3
        },
        "left": 0,
        "top": 0,
        "Render": {
          "@t": "MessageHandler",
          "data": "function() {\n  return h('div', {\n    style: {\n     'background-color': '#285477',\n     'position': 'fixed',\n     top: '0px',\n     left: '0px',\n     width: '100%',\n     display: 'flex'\n    }\n   }, [\n   h('button', {onclick: () => {\n     var blob = new Blob([_SaveImage(RootPackage)], {type: \"text/plain;charset=utf-8\"});\n     FileSaver.saveAs(blob, \"image.json\");\n   }}, 'Save Image'),\n   h('button', {onclick: () => {\n        var fileInput = document.getElementById('file-input');\n        var changeHandler = function() {\n          var file = fileInput.files[0];\n\n          if (file.name.match(/\\.(txt|json)$/)) {\n            var reader = new FileReader();\n\n            reader.onload = function() {\n              // console.log(JSON.parse(reader.result));\n              _LoadImage(JSON.parse(reader.result));\n            };\n\n            reader.readAsText(file);    \n          } else {\n           alert(\"File not supported, .txt or .json files only\");\n          }\n\n          fileInput.removeEventListener('change', changeHandler);\n          this.value = null;\n        }\n         \n        fileInput.addEventListener('change', changeHandler);\n\n       fileInput.click();\n\n   }}, 'Open Image'),\n   h('button', {onclick: () => {\n     RootPackage.InterfacePackage.ObjectEditor.New(RootPackage).Open();\n   }}, 'Open Root Package'),\n   h('button', null, 'About')\n  ]);\n}"
        }
      },
      "slot_annotations": {},
      "prototype_slots": [
        "parent"
      ]
    }
  }
]
