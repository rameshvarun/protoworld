[
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "RootPackage",
        "description": "The root package. All objects in the world should be accessible from here. If not, they will not be persisted in the live image."
      },
      "slot_values": {
        "parent": {
          "@r": 3
        },
        "CorePackage": {
          "@r": 4
        },
        "InterfacePackage": {
          "@r": 8
        },
        "Modules": {
          "@t": "ProtoObject",
          "data": {
            "annotations": {
              "name": "Modules",
              "description": "An object that contains all of the modules currently loaded into the program. You can launch modules from here in order to write them out to a file."
            },
            "slot_values": {
              "parent": {
                "@r": 1
              },
              "interface": {
                "@r": 7
              },
              "init": {
                "@r": 6
              }
            },
            "slot_annotations": {},
            "prototype_slots": [
              "parent"
            ]
          }
        }
      },
      "slot_annotations": {},
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "TopObject",
        "description": "The Object at the top of the inheritance heirarchy.",
        "creator": {
          "@t": "ProtoObject",
          "data": {
            "annotations": {},
            "slot_values": {
              "parent": {
                "@r": 2
              },
              "object": {
                "@r": 4
              },
              "slot": "TopObject"
            },
            "slot_annotations": {},
            "prototype_slots": [
              "parent"
            ]
          }
        }
      },
      "slot_values": {
        "AddSlot": {
          "@t": "MessageHandler",
          "data": "function(name, value) {\n  _AddSlot(this, name, value);\n}"
        },
        "Extend": {
          "@t": "MessageHandler",
          "data": "function(name, value) {\n  let child = _EmptyObject();\n  _AddSlot(child, 'parent', this)\n  _AddPrototypeSlot(child, 'parent')\n  return child;\n}"
        },
        "SetAnnotation": {
          "@t": "MessageHandler",
          "data": "\nfunction(name, value) {\n\t_SetAnnotation(this, name, value);\n}\n"
        },
        "GetAnnotation": {
          "@t": "MessageHandler",
          "data": "\nfunction(name) {\n\treturn _GetAnnotation(this, name);\n}\n"
        },
        "GetSlotNames": {
          "@t": "MessageHandler",
          "data": "\nfunction() {\n\treturn _GetSlotNames(this);\n}\n"
        },
        "CreateEditor": {
          "@t": "MessageHandler",
          "data": "\nfunction() {\n\treturn RootPackage.InterfacePackage.ObjectEditor.New(this);\n}\n"
        },
        "OpenEditor": {
          "@t": "MessageHandler",
          "data": "\nfunction() {\n\treturn this.CreateEditor().Open();\n}\n"
        },
        "ToString": {
          "@t": "MessageHandler",
          "data": "\nfunction() {\n\treturn this.GetAnnotation('name') || 'Unnamed Object';\n}\n"
        },
        "SetName": {
          "@t": "MessageHandler",
          "data": "function(name) {\n  this.SetAnnotation('name', name);\n}"
        },
        "SetDescription": {
          "@t": "MessageHandler",
          "data": "function(desc) {\n  this.SetAnnotation('description', desc);\n}"
        },
        "SetSlotAnnotation": {
          "@t": "MessageHandler",
          "data": "function(slot, name, value) { _SetSlotAnnotation(this, slot, name, value); }"
        },
        "SetSlotModule": {
          "@t": "MessageHandler",
          "data": "function(slot, module) { this.SetSlotAnnotation(slot, 'module', module); }"
        },
        "SetCreator": {
          "@t": "MessageHandler",
          "data": "function(object, slot) {\n  this.SetAnnotation('creator', RootPackage.CorePackage.CreatorAnnotation.New(object, slot))\n}"
        }
      },
      "slot_annotations": {
        "OpenEditor": {
          "module": {
            "@r": 7
          }
        },
        "CreateEditor": {
          "module": {
            "@r": 7
          }
        }
      },
      "prototype_slots": []
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "CreatorAnnotation"
      },
      "slot_values": {
        "parent": {
          "@r": 1
        },
        "New": {
          "@t": "MessageHandler",
          "data": "function(object, slot) {\n  let inst = this.Extend();\n  inst.AddSlot('object', object);\n  inst.AddSlot('slot', slot);\n  return inst;\n}"
        }
      },
      "slot_annotations": {},
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "TraitsPackage"
      },
      "slot_values": {
        "parent": {
          "@r": 1
        }
      },
      "slot_annotations": {},
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "CorePackage",
        "creator": {
          "@t": "ProtoObject",
          "data": {
            "annotations": {},
            "slot_values": {
              "parent": {
                "@r": 2
              },
              "object": {
                "@r": 0
              },
              "slot": "CorePackage"
            },
            "slot_annotations": {},
            "prototype_slots": [
              "parent"
            ]
          }
        }
      },
      "slot_values": {
        "parent": {
          "@r": 3
        },
        "TopObject": {
          "@r": 1
        },
        "TraitsPackage": {
          "@r": 3
        },
        "CreatorAnnotation": {
          "@r": 2
        },
        "Module": {
          "@r": 5
        }
      },
      "slot_annotations": {},
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "Module",
        "description": "The traits object for modules.",
        "creator": {
          "@t": "ProtoObject",
          "data": {
            "annotations": {},
            "slot_values": {
              "parent": {
                "@r": 2
              },
              "object": {
                "@r": 4
              },
              "slot": "Module"
            },
            "slot_annotations": {},
            "prototype_slots": [
              "parent"
            ]
          }
        }
      },
      "slot_values": {
        "parent": {
          "@r": 1
        },
        "FindSlots": {
          "@t": "MessageHandler",
          "data": "function() {\n  // Get all slots in objects tagged with the module.\n  let visited = new Set();\n  let slots = [];\n\n  var findSlots = (object) => {\n    if(!_IsProtoObject(object)) return;\n    if(visited.has(object)) return;\n\n    visited.add(object);\n    for(let slot of object.GetSlotNames()) {\n      if (_GetSlotAnnotation(object, slot, 'module') == this) {\n        slots.push({object, slot});\n      }\n      findSlots(object[slot]);\n    }\n  }\n\n  findSlots(RootPackage);\n  return slots;\n}"
        },
        "GenerateCode": {
          "@t": "MessageHandler",
          "data": "function() {\n  let slots = this.FindSlots();\n\n  var tracePath = (object) => {\n   if (object == RootPackage) return ['RootPackage'];\n   else {\n     let creator = _GetAnnotation(object, 'creator');\n     if (!creator)\n       throw new Error(`${object.ToString()} missing creator slot.`);\n     if (creator.object[creator.slot] != object)\n       throw new Error(`${object.ToString()}'s creator slot is invalid.`);\n     var path = tracePath(creator.object);\n     path.push(creator.slot);\n     return path;\n   }\n  }\n\n  let code = \"\";\n  for (let {object, slot} of slots) {\n    let path = tracePath(object);\n    for(let i = 0; i < path.length; ++i) {\n      let subpath = path.slice(0, i + 1);\n      let objpath = `window.${subpath.join('.')}`;\n      code += `${objpath} = ${objpath} || _EmptyObject();\\n`;\n    }\n\n    let value = object[slot];\n    let objpath = `window.${path.join('.')}`;\n    if (_IsMessageHandler(value)) {\n      let handlerCode = _GetMessageHandlerCode(value);\n      let escapedCode = handlerCode.split('\\n').map(line => jsesc(line, {'quotes': 'backtick' })).join('\\n');\n      code += `_AddSlot(${objpath}, \"${slot}\", _MakeMessageHandler(\\`${escapedCode}\\`));\\n`\n    }\n\n    code += '\\n';\n  }\n\n  return code;\n}"
        },
        "Export": {
          "@t": "MessageHandler",
          "data": "function() {\n  let code = this.GenerateCode();\n  var blob = new Blob([code], {type: \"text/plain;charset=utf-8\"});\n  FileSaver.saveAs(blob, \"module.js\");\n}"
        }
      },
      "slot_annotations": {
        "GenerateCode": {
          "module": {
            "@r": 6
          }
        },
        "FindSlots": {
          "module": {
            "@r": 6
          }
        },
        "Export": {
          "module": {
            "@r": 7
          }
        }
      },
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "InitModule"
      },
      "slot_values": {
        "parent": {
          "@r": 5
        }
      },
      "slot_annotations": {},
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {},
      "slot_values": {
        "parent": {
          "@r": 5
        }
      },
      "slot_annotations": {},
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "InterfacePackage",
        "creator": {
          "@t": "ProtoObject",
          "data": {
            "annotations": {},
            "slot_values": {
              "parent": {
                "@r": 2
              },
              "object": {
                "@r": 0
              },
              "slot": "InterfacePackage"
            },
            "slot_annotations": {},
            "prototype_slots": [
              "parent"
            ]
          }
        }
      },
      "slot_values": {
        "parent": {
          "@r": 3
        },
        "WindowManager": {
          "@t": "ProtoObject",
          "data": {
            "annotations": {
              "name": "WindowManager",
              "creator": {
                "@t": "ProtoObject",
                "data": {
                  "annotations": {},
                  "slot_values": {
                    "parent": {
                      "@r": 2
                    },
                    "object": {
                      "@r": 8
                    },
                    "slot": "WindowManager"
                  },
                  "slot_annotations": {},
                  "prototype_slots": [
                    "parent"
                  ]
                }
              },
              "description": "The window manager and entry point for the render and update main loop."
            },
            "slot_values": {
              "windows": [
                {
                  "@r": 10
                }
              ],
              "Render": {
                "@t": "MessageHandler",
                "data": "function() {\n  return this.windows.map(w => w.Render());\n}"
              },
              "Update": {
                "@t": "MessageHandler",
                "data": "function(dt) { this.windows.forEach(w => w.Update(dt)); }"
              },
              "AddWindow": {
                "@t": "MessageHandler",
                "data": "function(window) { this.windows.push(window); }"
              },
              "RemoveWindow": {
                "@t": "MessageHandler",
                "data": "function(window) { this.windows = this.windows.filter(item => item !== window); }"
              },
              "parent": {
                "@r": 1
              }
            },
            "slot_annotations": {
              "RemoveWindow": {
                "module": {
                  "@r": 7
                }
              },
              "AddWindow": {
                "module": {
                  "@r": 7
                }
              },
              "Update": {
                "module": {
                  "@r": 7
                }
              },
              "Render": {
                "module": {
                  "@r": 7
                }
              }
            },
            "prototype_slots": [
              "parent"
            ]
          }
        },
        "TraitsWindow": {
          "@r": 9
        },
        "HandlerEditor": {
          "@t": "ProtoObject",
          "data": {
            "annotations": {
              "name": "HandlerEditor",
              "description": "The default editor for message handlers."
            },
            "slot_values": {
              "parent": {
                "@r": 9
              },
              "RenderContent": {
                "@t": "MessageHandler",
                "data": "function() {\n  return [\n    <AceEditor style={{width: '100%'}} mode=\"jsx\" theme=\"monokai\" value={this.code} onChange={(value) => this.code = value}/>,\n    <button onClick={() => this.target[this.slot] = _MakeMessageHandler(this.code)}>Save</button>\n  ];\n}"
              },
              "New": {
                "@t": "MessageHandler",
                "data": "function(target, slot) {\n  let inst = this.Extend();\n  inst.AddSlot('target', target);\n  inst.AddSlot('slot', slot);\n  inst.AddSlot('code', _GetMessageHandlerCode(target[slot]));\n  return inst;\n}"
              },
              "GetTitle": {
                "@t": "MessageHandler",
                "data": "function() {\n return \"HandlerEditor: \" + this.target.toString() + \"->\" + this.slot;\n}"
              }
            },
            "slot_annotations": {},
            "prototype_slots": [
              "parent"
            ]
          }
        },
        "ObjectEditor": {
          "@t": "ProtoObject",
          "data": {
            "annotations": {
              "name": "ObjectEditor",
              "description": "The default editor for objects."
            },
            "slot_values": {
              "parent": {
                "@r": 9
              },
              "GetTitle": {
                "@t": "MessageHandler",
                "data": "function() {\n    return `${(this.target.GetAnnotation('name') || \"Unnamed Object\")} (Object Editor)`;\n}"
              },
              "RenderContent": {
                "@t": "MessageHandler",
                "data": "function() {\n  let description = this.target.GetAnnotation(\"description\");\n\n  return (\n    <div>\n      {description ? (\n        <>\n          {description}\n          <hr />\n        </>\n      ) : null}\n      <div>\n        <b>Slots</b>\n      </div>\n      {this.target.GetSlotNames().map(slot => {\n        let value = this.target[slot];\n        if (_IsMessageHandler(value)) {\n          return [\n            h(\"div\", null, slot),\n            h(\n              \"button\",\n              {\n                onClick: () =>\n                  RootPackage.InterfacePackage.HandlerEditor.New(\n                    this.target,\n                    slot\n                  ).Open()\n              },\n              [\"Edit Code\"]\n            )\n          ];\n        }\n        if (_IsProtoObject(value)) {\n          return h(\"div\", null, [\n            slot + \" \",\n            h(\"button\", { onClick: () => value.OpenEditor() }, value.toString())\n          ]);\n        }\n        return h(\"div\", null, [slot, value.toString()]);\n      })}\n      <hr />\n      <textarea onKeyUp={e => (this.evaulatorCode = e.target.value)} />\n      <button\n        onClick={() => {\n          let code = this.evaulatorCode;\n          function evalInContext() {\n            return eval(code);\n          }\n          console.log(evalInContext.call(this.target));\n        }}\n      >\n        Run\n      </button>\n    </div>\n  );\n}"
              },
              "New": {
                "@t": "MessageHandler",
                "data": "function(target) { let inst = this.Extend(); inst.AddSlot('target', target); return inst; }"
              }
            },
            "slot_annotations": {},
            "prototype_slots": [
              "parent"
            ]
          }
        },
        "MainMenu": {
          "@r": 10
        }
      },
      "slot_annotations": {},
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {
        "name": "TraitsWindow"
      },
      "slot_values": {
        "parent": {
          "@r": 1
        },
        "top": 0,
        "left": 0,
        "Open": {
          "@t": "MessageHandler",
          "data": "function() { RootPackage.InterfacePackage.WindowManager.AddWindow(this) }"
        },
        "Close": {
          "@t": "MessageHandler",
          "data": "function() { RootPackage.InterfacePackage.WindowManager.RemoveWindow(this) }"
        },
        "Update": {
          "@t": "MessageHandler",
          "data": "function(dt) {}"
        },
        "RenderContent": {
          "@t": "MessageHandler",
          "data": "function() { }"
        },
        "GetTitle": {
          "@t": "MessageHandler",
          "data": "function() { return 'Untitled Window'; }"
        },
        "Render": {
          "@t": "MessageHandler",
          "data": "function() {\n  return (\n    <div\n      style={{\n        resize: \"both\",\n        overflow: \"auto\",\n        border: \"1px solid black\",\n        position: \"absolute\",\n        backgroundColor: \"#f1f1f1\",\n        top: this.top + \"px\",\n        left: this.left + \"px\",\n        boxShadow: \"5px 5px 5px rgba(0, 0, 0, 0.5)\"\n      }}\n    >\n      <div\n        style={{\n          \"backgroundColor\": \"#285477\",\n          padding: \"3px\",\n          color: \"white\",\n          cursor: \"move\",\n          display: \"flex\",\n          justifyContent: \"space-between\"\n        }}\n        onMouseDown={e => {\n          var x = e.clientX;\n          var y = e.clientY;\n\n          document.onmousemove = e => {\n            var dx = e.clientX - x;\n            var dy = e.clientY - y;\n            x = e.clientX;\n            y = e.clientY;\n\n            this.left = this.left + dx;\n            this.top = this.top + dy;\n          };\n\n          document.onmouseup = () => {\n            document.onmouseup = null;\n            document.onmousemove = null;\n          };\n        }}\n      >\n        <b>{this.GetTitle()}</b>\n        <span>\n          <i\n            className=\"fas fa-search\"\n            title=\"Inspect Window Object\"\n            style={{ cursor: \"default\", marginRight: \"5px\" }}\n            onClick={() =>\n              RootPackage.InterfacePackage.ObjectEditor.New(this).Open()\n            }\n          />\n          <i\n            className=\"fas fa-times\"\n            title=\"Close Window\"\n            style={{ cursor: \"default\" }}\n            onClick={() => this.Close()}\n          />\n        </span>\n      </div>\n      <div style={{ padding: \"5px\" }}>{this.RenderContent()}</div>\n    </div>\n  );\n}"
        }
      },
      "slot_annotations": {},
      "prototype_slots": [
        "parent"
      ]
    }
  },
  {
    "@t": "ProtoObject",
    "data": {
      "annotations": {},
      "slot_values": {
        "parent": {
          "@r": 9
        },
        "left": 0,
        "top": 0,
        "Render": {
          "@t": "MessageHandler",
          "data": "function() {\n  return <div\n    style={{\n     'backgroundColor': '#285477',\n     'position': 'fixed',\n     top: '0px',\n     left: '0px',\n     width: '100%',\n     display: 'flex'\n   }}>\n   <button onClick={() => {\n     var blob = new Blob([_SaveImage(RootPackage)], {type: \"text/plain;charset=utf-8\"});\n     FileSaver.saveAs(blob, \"image.json\");\n   }}>Save Image</button>\n   <button onClick={() => {\n        var fileInput = document.getElementById('file-input');\n        var changeHandler = function() {\n          var file = fileInput.files[0];\n\n          if (file.name.match(/\\.(txt|json)$/)) {\n            var reader = new FileReader();\n\n            reader.onload = function() {\n              // console.log(JSON.parse(reader.result));\n              _LoadImage(JSON.parse(reader.result));\n            };\n\n            reader.readAsText(file);    \n          } else {\n           alert(\"File not supported, .txt or .json files only\");\n          }\n\n          fileInput.removeEventListener('change', changeHandler);\n          this.value = null;\n        }\n         \n        fileInput.addEventListener('change', changeHandler);\n\n       fileInput.click();\n   }}>Open Image</button>\n   <button onClick={() => {\n     RootPackage.InterfacePackage.ObjectEditor.New(RootPackage).Open();\n   }}>Open Root Package</button>\n    <button onClick={() => {\n        var fileInput = document.getElementById('file-input');\n        var changeHandler = function() {\n          var file = fileInput.files[0];\n\n          if (file.name.match(/\\.js$/)) {\n            var reader = new FileReader();\n\n            reader.onload = function() {\n              eval(reader.result);\n            };\n\n            reader.readAsText(file);    \n          } else {\n           alert(\"File not supported, .js files only\");\n          }\n\n          fileInput.removeEventListener('change', changeHandler);\n          this.value = null;\n        }\n         \n        fileInput.addEventListener('change', changeHandler);\n\n       fileInput.click();\n   }}>Load Module</button>\n  </div>;\n}"
        }
      },
      "slot_annotations": {},
      "prototype_slots": [
        "parent"
      ]
    }
  }
]
